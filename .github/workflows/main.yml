name: 'Update schedule'

on:
  schedule:
    - cron: '0 22,10 * * *'  # 每天 UTC 时间 22:00 和 10:00 触发
  workflow_dispatch:          # 支持手动触发
    branches:
      - master                # 允许手动触发的分支
      - dev                   # 根据你的分支名称修改
      - gd                    # 根据你的分支名称修改

jobs:
  push:
    runs-on: ubuntu-latest    # 使用最新的 Ubuntu 环境
    timeout-minutes: 120      # 设置超时时间为 120 分钟

    steps:
      # 步骤 1: 设置分支名称
      - name: Set branch name
        id: vars
        run: echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV  # 使用当前触发分支

      # 步骤 2: 检出代码
      - uses: actions/checkout@v3
        with:
          ref: ${{ env.BRANCH_NAME }}  # 使用上一步设置的分支名称
          token: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub Token 确保推送权限

      # 步骤 3: 设置 Python 环境
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # 使用 Python 3.11（可根据需要修改）
          update-environment: true
          cache: 'pipenv'          # 启用 pipenv 缓存

      # 步骤 4: 检查 open_driver 配置
      - name: Check open_driver config
        id: check_driver
        run: |
          echo "OPEN_DRIVER=$(python -c '
          try:
            from utils.config import config
            open_driver = config.open_driver
          except:
            open_driver = False
          print(open_driver)')" >> $GITHUB_ENV

      # 步骤 5: 安装 Chrome（如果需要）
      - name: Set up Chrome
        if: env.OPEN_DRIVER == 'True'  # 仅在 open_driver 为 True 时运行
        uses: browser-actions/setup-chrome@latest
        with:
          chrome-version: stable

      # 步骤 6: 安装 ChromeDriver（如果需要）
      - name: Download ChromeDriver
        if: env.OPEN_DRIVER == 'True'  # 仅在 open_driver 为 True 时运行
        uses: nanasess/setup-chromedriver@master

      # 步骤 7: 安装 FFmpeg（如果需要）
      - name: Install FFmpeg
        run: sudo apt-get update && sudo apt-get install -y ffmpeg

      # 步骤 8: 安装 pipenv
      - name: Install pipenv
        run: pip3 install --user pipenv

      # 步骤 9: 安装项目依赖
      - name: Install dependencies
        run: pipenv --python 3.11 && pipenv install --deploy

      # 步骤 10: 安装 Selenium（如果需要）
      - name: Install Selenium
        if: env.OPEN_DRIVER == 'True'  # 仅在 open_driver 为 True 时运行
        run: pipenv install selenium

      # 步骤 11: 运行更新脚本（支持自定义路径）
      - name: Update
        run: |
          set +e  # 禁用错误退出
          echo "Running update script..."
          # 替换为你的实际脚本路径
          SCRIPT_PATH="main.py"  # 修改为你的脚本路径
          if [[ -f "$SCRIPT_PATH" ]]; then
            echo "Found script at $SCRIPT_PATH"
            pipenv run python "$SCRIPT_PATH"
            if [ $? -ne 0 ]; then
              echo "Update script failed. Checking for syntax errors..."
              pipenv run python -m py_compile "$SCRIPT_PATH"
              exit 1
            fi
          else
            echo "Error: Could not find script at $SCRIPT_PATH"
            exit 1
          fi
          set -e  # 重新启用错误退出

      # 步骤 12: 提交和推送更改（如果有）
      - name: Commit and push if changed
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git diff
          final_file=$(python -c '
          try: 
            from utils.config import config
            final_file = config.final_file
          except: 
            final_file = "output/result.txt"
          print(final_file)')
          final_m3u_file=$(python -c '
          try: 
            from utils.config import config
            import os
            final_file = config.final_file
            final_m3u_file = os.path.splitext(final_file)[0] + ".m3u"
          except: 
            final_m3u_file = "output/result.m3u"
          print(final_m3u_file)')
          if [[ -f "$final_file" ]]; then
            git add -f "$final_file"
          fi
          if [[ -f "$final_m3u_file" ]]; then
            git add -f "$final_m3u_file"
          fi
          if [[ -f "output/cache.pkl" ]]; then
            git add -f "output/cache.pkl"
          fi
          if [[ -f "output/sort.log" ]]; then
            git add -f "output/sort.log"
          fi
          if [[ -f "updates/fofa/fofa_hotel_region_result.pkl" ]]; then
            git add -f "updates/fofa/fofa_hotel_region_result.pkl"
          fi
          if [[ -f "updates/fofa/fofa_multicast_region_result.pkl" ]]; then
            git add -f "updates/fofa/fofa_multicast_region_result.pkl"
          fi
          if ! git diff --staged --quiet; then
            git commit -m "Github Action Auto Updated"
            git push origin ${{ env.BRANCH_NAME }}  # 推送到当前分支
          else
            echo "No changes to commit."
          fi